option_settings:
  aws:elasticbeanstalk:container:nodejs:
    NodeCommand: "npm start"
    NodeVersion: 18.0.0
  aws:elasticbeanstalk:application:environment:
    NODE_ENV: production
  aws:elasticbeanstalk:container:nodejs:staticfiles:
    /public: /public
# Guide de Déploiement AWS

## 🚀 Déploiement de l'application sur AWS

Ce guide vous accompagne dans le déploiement complet de l'application sur AWS.

## Architecture AWS

```
┌─────────────────────────────────────────────────────────┐
│                                                         │
│  AWS Amplify (Frontend)                                 │
│  - Hébergement HTML/CSS/JS                              │
│  - HTTPS automatique                                    │
│  - Déploiement continu depuis GitHub                    │
│                                                         │
└────────────────┬────────────────────────────────────────┘
                 │
                 │ API Calls
                 │
┌────────────────▼────────────────────────────────────────┐
│                                                         │
│  AWS Elastic Beanstalk ou EC2 (Backend)                │
│  - Serveur Node.js + Express                            │
│  - API REST                                             │
│                                                         │
└────────────────┬────────────────────────────────────────┘
                 │
                 │ Connexion DB
                 │
┌────────────────▼────────────────────────────────────────┐
│                                                         │
│  AWS RDS PostgreSQL (Base de données)                   │
│  - Base de données managée                              │
│  - Backups automatiques                                 │
│                                                         │
└─────────────────────────────────────────────────────────┘
```

## Étape 1 : Créer une base de données RDS PostgreSQL

### Via AWS Console

1. **Accédez à RDS** : https://console.aws.amazon.com/rds/
2. **Créer une base de données**
   - Cliquez sur "Create database"
   - Choisissez "PostgreSQL"
   - Version : PostgreSQL 15.x ou supérieur

3. **Configuration**
   ```
   Template: Free tier (pour commencer)
   DB instance identifier: gestionnaire-stock-db
   Master username: postgres
   Master password: [votre mot de passe sécurisé]

   DB instance class: db.t3.micro (Free tier)
   Storage: 20 GB

   Public access: Yes (pour l'instant)
   VPC security group: Create new
   ```

4. **Créer la base de données**
   - Attendez 5-10 minutes que la base soit disponible
   - Notez l'endpoint (ex: `gestionnaire-stock-db.xxxxx.eu-west-1.rds.amazonaws.com`)

5. **Configurer le Security Group**
   - Dans l'onglet "Connectivity & security"
   - Cliquez sur le security group
   - Ajoutez une règle "Inbound" : PostgreSQL (5432) depuis votre IP et depuis le backend

6. **Créer les tables**
   ```bash
   psql -h gestionnaire-stock-db.xxxxx.eu-west-1.rds.amazonaws.com -U postgres -d postgres -f database.sql
   ```

### Via AWS CLI

```bash
# Créer la base de données RDS
aws rds create-db-instance \
    --db-instance-identifier gestionnaire-stock-db \
    --db-instance-class db.t3.micro \
    --engine postgres \
    --master-username postgres \
    --master-user-password VotreMotDePasse123! \
    --allocated-storage 20 \
    --publicly-accessible \
    --backup-retention-period 7
```

## Étape 2 : Déployer le Backend

### Option A : AWS Elastic Beanstalk (Recommandé)

1. **Installer AWS CLI et EB CLI**
   ```bash
   # Installer AWS CLI
   pip install awscli

   # Installer EB CLI
   pip install awsebcli

   # Configurer AWS CLI
   aws configure
   # Entrez vos credentials AWS
   ```

2. **Initialiser Elastic Beanstalk**
   ```bash
   cd D:\techonologie_web\techonologie_web
   eb init

   # Sélectionnez:
   # - Région: eu-west-1 (ou votre région)
   # - Application name: gestionnaire-stock
   # - Platform: Node.js
   # - Platform version: Node.js 18 running on 64bit Amazon Linux 2
   # - SSH: No (ou Yes si vous voulez)
   ```

3. **Créer l'environnement**
   ```bash
   eb create gestionnaire-stock-env

   # Attendez 5-10 minutes
   ```

4. **Configurer les variables d'environnement**
   ```bash
   eb setenv DB_HOST=gestionnaire-stock-db.xxxxx.eu-west-1.rds.amazonaws.com
   eb setenv DB_USER=postgres
   eb setenv DB_PASSWORD=VotreMotDePasse
   eb setenv DB_NAME=postgres
   eb setenv DB_PORT=5432
   eb setenv JWT_SECRET=votre_secret_jwt_super_securise_2024
   eb setenv PORT=3000
   ```

5. **Déployer**
   ```bash
   eb deploy
   ```

6. **Ouvrir l'application**
   ```bash
   eb open
   ```

### Option B : AWS EC2 (Manuel)

1. **Créer une instance EC2**
   - Type: t2.micro (Free tier)
   - AMI: Amazon Linux 2 ou Ubuntu 22.04
   - Security Group: Ouvrir les ports 22 (SSH), 80 (HTTP), 443 (HTTPS), 3000

2. **Se connecter à l'instance**
   ```bash
   ssh -i votre-cle.pem ec2-user@votre-ip-publique
   ```

3. **Installer Node.js**
   ```bash
   # Pour Amazon Linux 2
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
   . ~/.nvm/nvm.sh
   nvm install 18

   # Installer PM2 pour gérer le processus
   npm install -g pm2
   ```

4. **Cloner et configurer le projet**
   ```bash
   git clone https://github.com/Junior620/work_school_web.git
   cd work_school_web
   npm install

   # Créer le fichier .env
   nano .env
   # Collez vos variables d'environnement avec l'endpoint RDS
   ```

5. **Démarrer avec PM2**
   ```bash
   pm2 start server.js --name gestionnaire-stock
   pm2 save
   pm2 startup
   ```

6. **Configurer Nginx (optionnel mais recommandé)**
   ```bash
   sudo yum install nginx -y
   sudo nano /etc/nginx/conf.d/app.conf
   ```

   Contenu :
   ```nginx
   server {
       listen 80;
       server_name votre-domaine.com;

       location / {
           proxy_pass http://localhost:3000;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_cache_bypass $http_upgrade;
       }
   }
   ```

   ```bash
   sudo systemctl start nginx
   sudo systemctl enable nginx
   ```

## Étape 3 : Déployer le Frontend sur AWS Amplify

### Via AWS Console (Recommandé)

1. **Accédez à AWS Amplify** : https://console.aws.amazon.com/amplify/

2. **Créer une nouvelle application**
   - Cliquez sur "New app" → "Host web app"
   - Sélectionnez "GitHub"
   - Autorisez AWS Amplify à accéder à votre GitHub
   - Sélectionnez le repository : `Junior620/work_school_web`
   - Branche : `main`

3. **Configurer le build**

   Créez un fichier `amplify.yml` dans votre projet :
   ```yaml
   version: 1
   frontend:
     phases:
       build:
         commands:
           - echo "Nothing to build, static files only"
     artifacts:
       baseDirectory: /
       files:
         - '**/*'
     cache:
       paths: []
   ```

4. **Mettre à jour les URLs de l'API**

   Modifiez les fichiers JS pour pointer vers votre backend AWS :
   - `asset/login.js`
   - `asset/register.js`
   - `asset/index.js`

   Remplacez :
   ```javascript
   const API_URL = 'http://localhost:3000/api';
   ```

   Par :
   ```javascript
   const API_URL = 'https://votre-backend.elasticbeanstalk.com/api';
   // ou
   const API_URL = 'https://api.votre-domaine.com/api';
   ```

5. **Déployer**
   - Amplify va automatiquement déployer votre site
   - Vous obtiendrez une URL du type : `https://main.xxxxx.amplifyapp.com`

6. **Configurer CORS sur le backend**

   Dans `server.js`, mettez à jour CORS :
   ```javascript
   app.use(cors({
       origin: [
           'https://main.xxxxx.amplifyapp.com',
           'http://localhost:3000'
       ],
       credentials: true
   }));
   ```

### Via AWS CLI

```bash
# Installer Amplify CLI
npm install -g @aws-amplify/cli

# Configurer
amplify configure

# Initialiser
amplify init

# Ajouter hosting
amplify add hosting

# Publier
amplify publish
```

## Étape 4 : Configuration finale

### 1. Mettre à jour le backend avec l'URL Amplify

```bash
# Dans server.js, mettre à jour CORS
eb setenv AMPLIFY_URL=https://main.xxxxx.amplifyapp.com
eb deploy
```

### 2. Créer un domaine personnalisé (Optionnel)

**Pour le backend :**
- Utilisez Route 53 ou votre registrar de domaine
- Pointez `api.votre-domaine.com` vers votre Elastic Beanstalk

**Pour le frontend :**
- Dans Amplify Console → Domain management
- Ajoutez votre domaine personnalisé

### 3. Activer HTTPS (Recommandé)

**Backend (EC2) :**
```bash
# Installer Certbot
sudo yum install certbot python3-certbot-nginx -y

# Obtenir un certificat SSL
sudo certbot --nginx -d api.votre-domaine.com
```

**Amplify :** HTTPS est automatiquement activé

## Étape 5 : Tests

1. **Tester le backend**
   ```bash
   curl https://votre-backend.elasticbeanstalk.com/api/health
   ```

2. **Tester le frontend**
   - Ouvrez l'URL Amplify
   - Créez un compte
   - Ajoutez des produits
   - Vérifiez que tout fonctionne

## 📊 Coûts estimés (Free Tier)

- **RDS PostgreSQL (t3.micro)** : Gratuit 12 mois (750h/mois)
- **EC2 (t2.micro)** : Gratuit 12 mois (750h/mois)
- **Elastic Beanstalk** : Gratuit (vous payez seulement les ressources)
- **Amplify** : 1000 minutes build gratuites/mois, 5GB stockage
- **Total** : ~0-5$/mois après Free Tier

## 🔒 Sécurité après déploiement

1. **Changez tous les secrets**
   - Générez un nouveau JWT_SECRET
   - Utilisez des mots de passe forts pour RDS

2. **Configurez les Security Groups**
   - RDS : Accepter uniquement depuis le backend
   - Backend : Ouvrir seulement les ports nécessaires

3. **Activez les backups**
   - RDS : Backups automatiques (7 jours)
   - Snapshots réguliers

4. **Monitoring**
   - Activez CloudWatch pour surveiller les logs
   - Configurez des alertes

## 🚨 Dépannage

### Problème de connexion à RDS
```bash
# Testez la connexion
psql -h votre-endpoint.rds.amazonaws.com -U postgres -d postgres

# Vérifiez le security group
aws ec2 describe-security-groups --group-ids sg-xxxxx
```

### Logs Elastic Beanstalk
```bash
eb logs
```

### Logs EC2
```bash
pm2 logs
```

## 📚 Ressources

- [AWS Elastic Beanstalk Docs](https://docs.aws.amazon.com/elasticbeanstalk/)
- [AWS Amplify Docs](https://docs.amplify.aws/)
- [AWS RDS Docs](https://docs.aws.amazon.com/rds/)

---

Besoin d'aide ? Ouvrez une issue sur GitHub !

